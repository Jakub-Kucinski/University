#lang racket
(require rackunit)
(require rackunit/text-ui)

;;Procedura merge scala dwie posortowane listy w jedną posortowaną listę
;;Jeśli obie są niepuste, to sprawdzane jest, który element należy dodać na koniec listy wynikowej (mniejszy)
;;Gdy któraś z list jest pusta zwracana jest druga z nich, gdy obie są puste zwracana jest druga.
;;Merge dwóch list polega na stworzeniu pary z mniejszego z pierwszych elementów obu list (gdy istnieją)
;;i z merge od jednej niezmienionej listy i ogona drugiej z nich.
(define (merge xs ys)
  (if (or (null? xs) (null? ys))
      (if (null? xs)
          ys
          xs)
      (if (> (car xs) (car ys))
          (cons (car ys) (merge xs (cdr ys)))
          (cons (car xs) (merge (cdr xs) ys)))))

;;Procedura split dzieli przyjmowaną w argumencie listę na dwie (zwraca parę list) o równych lub prawie równych
;;(z dokładnością do 1) długościach.
(define (split xs)
  
  ;;Procedura zwraca część listy xs od pierwszego elementu do n-tego
  (define (start xs n)
    (if (> n 0)
        (cons (car xs) (start (cdr xs) (- n 1)))
        null))
  
  ;;Procedura zwraca część listy xs od n+1-ego elementu do końca
  (define (end xs n)
    (if (> n 0)
        (end (cdr xs) (- n 1))
        xs))
  ;;Wyrażenie zwraca parę list. Pierwsza lista zawiera elementy 1...floor(len/2),
  ;;a druga (floor(len/2))+1...len
  (let ((len (length xs)))
    (cons (start xs (quotient len 2)) (end xs (quotient len 2)))))

;;Procedura przyjmuje jako argument listę i zwraca ją posortowaną.
;;Algorytm polega na rekurencyjnym posortowaniu przez mergesort dwóch list utworzonych przez
;;podzielenie splitem listy xs, a następnie scalenie ich przez merge. Gdy xs jest listą pustą
;;lub jednoelementową zostaje ona od razu zwrócona.
(define (mergesort xs)
  (if (or (null? xs) (null? (cdr xs)))
      xs
      (let ((zs (split xs)))
        (merge (mergesort (car zs)) (mergesort (cdr zs))))))




(define merge-tests
  (test-suite
   "Tests of merge"
   (check-equal? (merge (list 1 3 5) (list 2 4 6)) (list 1 2 3 4 5 6) "Blad 1")
   (check-equal? (merge (list 1 4 5 6) (list 1 2 3)) (list 1 1 2 3 4 5 6) "Blad 2")
   (check-equal? (merge (list 1 3 5) (list)) (list 1 3 5) "Blad 3")
   (check-equal? (merge (list) (list 1 3 5)) (list 1 3 5) "Blad 4")
   (check-equal? (merge (list) (list)) (list) "Blad 5")
   ))

(define split-tests
  (test-suite
   "Tests of split"
   (check-equal? (split (list 1 2 3 4 5 6)) (cons (list 1 2 3) (list 4 5 6)) "Blad 1")
   (check-equal? (split (list 1 2 3)) (cons (list 1) (list 2 3)) "Blad 2")
   (check-equal? (split (list 1 2)) (cons (list 1) (list 2)) "Blad 3")
   (check-equal? (split (list 1)) (cons (list) (list 1)) "Blad 4")
   (check-equal? (split (list)) (cons (list) (list)) "Blad 5")
   ))

(define mergesort-tests
  (test-suite
   "Tests of merge-sort"
   (check-equal? (mergesort (list 5 4 3 2 1)) (list 1 2 3 4 5) "Blad 1")
   (check-equal? (mergesort (list 5 1 5 2 2 4)) (list 1 2 2 4 5 5) "Blad 2")
   (check-equal? (mergesort (list)) (list) "Blad 3")
   (check-equal? (mergesort (list 1 2 3 4 5)) (list 1 2 3 4 5) "Blad 4")
   (check-equal? (mergesort (list 1 1 1 1)) (list 1 1 1 1) "Blad 5")
   (check-equal? (mergesort (list 1)) (list 1) "Blad 6")
   ))

(run-tests merge-tests)
(run-tests split-tests)
(run-tests mergesort-tests)