#lang racket

(define (merge xs ys)
  (if (or (null? xs) (null? ys))
      (if (null? xs)
          ys
          xs)
      (if (> (car xs) (car ys))
          (cons (car ys) (merge xs (cdr ys)))
          (cons (car xs) (merge (cdr xs) ys)))))
;;quotient
(define (split xs)
  (define (start xs n)
    (if (> n 0)
        (cons (car xs) (start (cdr xs) (- n 1)))
        null))
  (define (end xs n)
    (if (> n 0)
        (end (cdr xs) (- n 1))
        xs))
  (let ((len (length xs)))
    (cons (start xs (quotient len 2)) (end xs (quotient len 2)))))

(define (mergesort xs)
  (if (or (null? xs) (null? (cdr xs)))
      xs
      (let ((zs (split xs)))
        (merge (mergesort (car zs)) (mergesort (cdr zs))))))

;(merge (list 1 3 5) (list 2 4 6))
;(merge (list 1 4 5 6) (list 1 2 3))
;(merge (list 1 3 5) (list))
;(merge (list) (list 1 3 5))
;(merge (list) (list))
;(split (list 1 2 3 4 5 6))
;(mergesort (list 5 4 3 2))