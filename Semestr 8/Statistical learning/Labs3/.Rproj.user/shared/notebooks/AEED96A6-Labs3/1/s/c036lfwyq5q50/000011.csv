"0","set.seed(42) "
"0","sigma = 1"
"0","n = 100"
"0","p = 200"
"0","X = matrix(rnorm(n*p, 0, 0.1), n, p)"
"0","e = rnorm(n)"
"0","beta = c(rep(0, p))"
"0","non_zero_beta_val = 30"
"0","R = non_zero_beta_val"
"0","irrepresentability_numbers = c(rep(0, 50))"
"0","max_k = 0"
"0",""
"0","for(k in 1:99){"
"0","    b=c(rep(R,k),rep(0,p-k))"
"0","    Y=X%*%b"
"0","    "
"0","    ### X is the design matrix and Y is the response of the linear model ### "
"0","    BP_OLS=function(X,Y) "
"0","    {"
"0","      "
"0","      A1=diag(rep(1,p))"
"0","      Mcontrainte=matrix(nrow=(2*p+n),ncol=5*p)"
"0","      Mcontrainte[1:p,1:p]=A1"
"0","      Mcontrainte[1:p,(p+1):(2*p)]=rep(0,p^2)"
"0","      Mcontrainte[1:p,(2*p+1):(3*p)]=-A1"
"0","      Mcontrainte[(p+1):(2*p),1:p]=rep(0,p^2)"
"0","      Mcontrainte[(p+1):(2*p),(p+1):(2*p)]=A1"
"0","      Mcontrainte[(p+1):(2*p),(2*p+1):(3*p)]=-A1"
"0","      Mcontrainte[1:(2*p),(3*p+1):(5*p)]=diag(rep(1,2*p))"
"0","      Mcontrainte[(2*p+1):(2*p+n),1:p]=X"
"0","      Mcontrainte[(2*p+1):(2*p+n),(p+1):(2*p)]=-X"
"0","      Mcontrainte[(2*p+1):(2*p+n),(2*p+1):(5*p)]=rep(0,(3*n*p))"
"0",""
"0","      foptimiser=c(rep(0,(2*p)),rep(1,p),rep(0,(2*p))) #Correspond Å• 0*b1+...+0*bp+z1+...+zp"
"0",""
"0","      inegalite=rep(""="",(2*p+n))"
"0",""
"0","      second_membre_noise=rep(0,(2*p+n))"
"0","      second_membre=c(rep(0,2*p),Y)"
"0",""
"0","      s=lp (""min"", foptimiser, Mcontrainte, inegalite, second_membre)$solution"
"0","      solution=s[1:p]-s[(p+1):(2*p)]"
"0","      Active_set_init=(1:p)[abs(solution)>0.0000000001]"
"0","      X_sel=X[,Active_set_init]"
"0","      Active_noise=setdiff(Active_set_init,(1:k))"
"0","      Active_set=(1:p)[abs(solution)>4]"
"0","      "
"0","      Active_set=(1:p)[abs(solution)>4]"
"0","      "
"0","      return(Active_set)"
"0","    }"
"0","    "
"0","    active_set = BP_OLS(X, Y)"
"0","    if (length(active_set) == k){"
"0","        if (sum((active_set - 1:k)^2) == 0){"
"0","            max_k = k"
"0","        }"
"0","    }"
"0","    # if (length(active_set) >= k){"
"0","    #     if (sum((active_set[1:k] - 1:k)^2) == 0){"
"0","    #         max_k = k"
"0","    #     }"
"0","    # }"
"0","}"
"0","k_ID = max_k"
"0",""
"0","beta = c(rep(0, p))"
"0","beta[1:k_ID] = non_zero_beta_val"
"0","Y = X %*% beta + e"
