"0","sigma = 1"
"0","n = 1000"
"0","p = 950"
"0","sigma_matrix = matrix(rep(0.5, 950*950), nrow=950)"
"0","diag(sigma_matrix) = 1"
"0","sigma_matrix = sigma_matrix / n"
"0","X = rmvnorm(n, rep(0, p), sigma_matrix)"
"0","e = rnorm(n)"
"0","beta = c(rep(0, p))"
"0","non_zero_beta_val = 3.5"
"0","ks = c(20, 100, 200)"
"0",""
"0","names_of_columns = c(""k"", ""lambda_sure_ridge"", ""lambda_sure_lasso"", ""lambda_sure_elnet"", ""lambda_crossval_ridge"", ""lambda_crossval_lasso"","
"0","                     ""lambda_crossval_elnet"")"
"0","optimal_lambdas = data.frame(matrix(ncol=length(names_of_columns), nrow=0))"
"0","colnames(optimal_lambdas) = names_of_columns"
"0",""
"0","for(k in ks){"
"0","    print(""Next iteration"")"
"0","    beta[1:k] = non_zero_beta_val"
"0","    Y = X %*% beta + e"
"0","    "
"0","    # SURE RIDGE"
"0","    # lambdas = seq(from=0.0001,by=0.0001, to=0.01)"
"0","    # if (k == 20){"
"0","    #     lambdas = seq(from=1.0 ,by=1.0, to=100.0)"
"0","    # }"
"0","    lambdas = c(2:10 %o% 10^(-5:5))"
"0","    lambda_sure_ridge = 0"
"0","    best_pe = 10000000"
"0","    for(lambda in lambdas){"
"0","        obj_ridge = glmnet(X, Y, alpha=0, intercept=FALSE, standardize=FALSE, lambda=lambda)"
"0","        #  ""a0""        ""beta""      ""df""        ""dim""       ""lambda""    ""dev.ratio"" ""nulldev""   ""npasses""   ""jerr""      ""offset""    ""call""      ""nobs"" "
"0","        beta_ridge = coefficients(obj_ridge)"
"0","        beta_ridge = beta_ridge[2:(p+1),1]"
"0","        RSS = sum((Y - X%*%beta_ridge)^2)"
"0","        "
"0","        lambda_2 = lambda * n"
"0","        M = X %*% solve(t(X) %*% X + lambda_2 * diag(p)) %*% t(X)"
"0","        sure = RSS + 2 * sigma^2 * sum(diag(M))"
"0","        # print(""-------"")"
"0","        # print(sure) "
"0","        # print(RSS)"
"0","        # print(2 * sigma^2 * sum(diag(M)))"
"0","        if (sure < best_pe){"
"0","            best_pe = sure"
"0","            lambda_sure_ridge = lambda"
"0","        }"
"0","    }"
"0","    "
"0","    # SURE LASSO"
"0","    lambdas = seq(from=0.00001,by=0.00001, to=0.01)"
"0","    # lambdas = seq(from=0.1,by=0.1, to=0.1)"
"0","    lambda_sure_lasso = 0"
"0","    best_pe = 10000000"
"0","    for(lambda in lambdas){"
"0","        obj_lasso = glmnet(X, Y, alpha=1, intercept=FALSE, standardize=FALSE, lambda=lambda)"
"0","        #  ""a0""        ""beta""      ""df""        ""dim""       ""lambda""    ""dev.ratio"" ""nulldev""   ""npasses""   ""jerr""      ""offset""    ""call""      ""nobs"" "
"0","        beta_lasso = coefficients(obj_lasso)"
"0","        beta_lasso = beta_lasso[2:(p+1),1]"
"0","        RSS = sum((Y - X%*%beta_lasso)^2)"
"0","        sure = RSS + 2 * sigma^2 * sum(beta_lasso != 0)"
"0","        if (sure < best_pe){"
"0","            best_pe = sure"
"0","            lambda_sure_lasso = lambda"
"0","        }"
"0","    }"
"0","    "
"0","    # SURE ELASTICNET"
"0","    lambdas = seq(from=0.0001,by=0.0001, to=0.01)"
"0","    # lambdas = seq(from=0.1,by=0.1, to=0.1)"
"0","    lambda_sure_elnet = 0"
"0","    best_pe = 10000000"
"0","    for(lambda in lambdas){"
"0","        obj_elnet = glmnet(X, Y, alpha=0.5, intercept=FALSE, standardize=FALSE, lambda=lambda)"
"0","        #  ""a0""        ""beta""      ""df""        ""dim""       ""lambda""    ""dev.ratio"" ""nulldev""   ""npasses""   ""jerr""      ""offset""    ""call""      ""nobs"" "
"0","        beta_elnet = coefficients(obj_elnet)"
"0","        beta_elnet = beta_elnet[2:(p+1),1]"
"0","        RSS = sum((Y - X%*%beta_elnet)^2)"
"0","        nonzero_betas_indices = which(beta_elnet != 0)"
"0","        if (length(nonzero_betas_indices) > 0){"
"0","            X_A = X[, nonzero_betas_indices]"
"0","            lambda_2 = lambda * 0.5 * n"
"0","            # Lambda_2 is the ridge part. A is the active set."
"0","            H = X_A %*% solve(t(X_A) %*% X_A + lambda_2 * diag(length(nonzero_betas_indices))) %*% t(X_A)"
"0","            sure = RSS + 2 * sigma^2 * sum(diag(H))"
"0","            if (sure < best_pe){"
"0","                best_pe = sure"
"0","                lambda_sure_elnet = lambda"
"0","            }"
"0","        }"
"0","    }"
"0","    "
"0","    # CROSSVALIDATION RIDGE"
"0","    # lambdas<-seq(from=0.0001,by=0.01, to=1.0)"
"0","    lambdas = seq(from=0.0001,by=0.0001, to=0.01)"
"0","    obj_cv_ridge = cv.glmnet(X, Y, alpha=0, intercept=FALSE, standardize=FALSE, nfolds = 10, lambda=lambdas)"
"0","    lambda_crossval_ridge = obj_cv_ridge$lambda.min"
"0",""
"0","    # CROSSVALIDATION LASSO"
"0","    # lambdas<-seq(from=0.0001,by=0.01, to=1.0)"
"0","    obj_cv_lasso = cv.glmnet(X, Y, alpha=1, intercept=FALSE, standardize=FALSE, nfolds = 10)"
"0","    lambda_crossval_lasso = obj_cv_lasso$lambda.min"
"0","    "
"0","    # CROSSVALIDATION ELASTICNET"
"0","    # lambdas<-seq(from=0.0001,by=0.01, to=1.0)"
"0","    obj_cv_elnet = cv.glmnet(X, Y, alpha=0.5, intercept=FALSE, standardize=FALSE, nfolds = 10)"
"0","    lambda_crossval_elnet = obj_cv_elnet$lambda.min"
"0","    "
"0","    # SAVE OPTIMAL LAMBDAS"
"0","    optimal_lambdas[nrow(optimal_lambdas) + 1,] = c(k, lambda_sure_ridge, lambda_sure_lasso, lambda_sure_elnet, lambda_crossval_ridge, lambda_crossval_lasso, lambda_crossval_elnet)"
"0","}"
"1","[1]"
"1"," ""Next iteration"""
"1","
"
"1","[1]"
"1"," ""Next iteration"""
"1","
"
"1","[1]"
"1"," ""Next iteration"""
"1","
"
